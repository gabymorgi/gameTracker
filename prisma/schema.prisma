generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Game {
  id                   String      @id @default(uuid())
  name                 String
  playedTime           Int
  extraPlayedTime      Int?
  imageUrl             String
  appid                Int?        @unique
  start                DateTime
  end                  DateTime
  obtainedAchievements Int
  totalAchievements    Int
  gameTags             GameTag[]
  changelogs           Changelog[]
  state                GameState   @default(PLAYING)
  platform             Platform    @default(PC)
  mark                 Int         @default(-1)
  review               String?
}

enum GameState {
  ACHIEVEMENTS
  BANNED
  COMPLETED
  DROPPED
  PLAYING
  WON
}

enum Platform {
  NES
  SEGA
  PS1
  PS2
  SNES
  PC
  NDS
  GBA
  WII
  ANDROID
  FLASH
}

model GameTag {
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String
  tag    Tags   @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([gameId, tagId])
}

model Tags {
  id       String    @id @default(uuid())
  hue      Int
  gameTags GameTag[]
}

model Changelog {
  id           String    @id @default(uuid())
  createdAt    DateTime
  hours        Int
  achievements Int
  state        GameState @default(PLAYING)
  game         Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId       String
}

model Admin {
  id       String @id @default(uuid())
  email    String @unique
  password String
}

model Word {
  id                    String       @id @default(uuid())
  value                 String       @unique
  definition            String?
  pronunciation         String?
  phrases               Phrase[]
  priority              Int          @default(0)
  practiceWord          Float        @default(0)
  practicePhrase        Float        @default(0)
  practicePronunciation Float        @default(0)
  practiceListening     Float        @default(0)
  practiceTranslation   Float        @default(0)
  nextPractice          DateTime     @default(now())
}

model Phrase {
  id          String       @id @default(uuid())
  content     String
  translation String?
  word        Word         @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId      String
}

model Book {
  id       String    @id @default(uuid())
  name     String
  saga     String
  words    Int
  imageUrl String?
  start    DateTime
  end      DateTime
  language String
  changelogs           BookChangelog[]
  state    BookState @default(READING)
  mark     Int       @default(-1)
  review   String?
}

enum BookState {
  WANT_TO_READ
  READING
  FINISHED
  DROPPED
}

model BookChangelog {
  id           String    @id @default(uuid())
  createdAt    DateTime
  words        Int
  book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       String
}
